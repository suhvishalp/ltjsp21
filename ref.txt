
1. openjdk 1.8 
2. Eclipse for EE / STS 4 
3. MySQL community server 8.xxx
    - mysql workbench 
4. nodejs 12 / 14
5. mongodb community server - any latest
6. docker 



Language                            library / pacakges                    framework 

Java                                standard libraries                      Spring 
                                    3rd party libraries 

C#                                  ////                                    .Net 

javascript                          JQuery, React, bootstrap                angular 

python                              ///                                     ...//


  |                                         |                               |
Programming                         simplify some tasks                 standardize the process 
capabilities 




build tools 
    - maven 
    - gradle 

deployment tools 

testing tools 

linting 



Spring Framework
--------------------

    - IOC - inversion of control 
                - delegates the responsibility to create the objects to container 

    - Container 
        - responsible to manage the life cycle of objects 

        BeanFactory interface 

        ApplicationContext interface 
            - ClassPathXmlApplicationContext
            - AnnotationConfigApplicationContext
            - WebXmlApplicationContext
            - ....
            - ...

    - Spring beans / bean definition 
            - spring beans are objects which are managed by container

    - Ways to define beans 

        - xml 
            <bean id="employee" class="com.demo.bo.Employee"></bean>    
	        <bean id="employeeService" class="com.demo.services.EmployeeSerivce"></bean>
           <bean id="employeeDAO" class="com.demo.dao.EmployeeDAO"></bean>
    
        - java 
                	@Bean
                    public EmployeeService createEmployeeService() {
                        return new EmployeeService();
                    }

        - annotation 
            - @Component, @Service, @Controller, @Repository

    - application without spring 


    - application with spring 


    - Spring modules 
    ----------------------
        Core    : Provides core features like DI (Dependency Injection), Internationalisation, Validation, and AOP (Aspect Oriented Programming)
        Data Access : Supports data access through JTA (Java Transaction API), JPA (Java Persistence API), and JDBC (Java Database Connectivity)
        Web : Supports both Servlet API (Spring MVC) and of recently Reactive API (Spring WebFlux), and additionally supports WebSockets, STOMP, and WebClient
        Integration : Supports integration to Enterprise Java through JMS (Java Message Service), JMX (Java Management Extension), and RMI (Remote Method Invocation)
        Testing:     Wide support for unit and integration testing through Mock Objects, Test Fixtures, Context Management, and Caching


    DTO 

    Pojo 

    Java Beans 

    Spring Beans 

    VO 

    BO 

    Entities 


https://www.baeldung.com/spring-bean
https://www.baeldung.com/spring-why-to-choose


Spring Boot autoconfiguration 


- Java Application 
    - Object model 


- Database 
    - Relational model 

- ORM tools 
    - hibernate
    - iBatis 
    - Toplink 
    - ...

    -> mapping the java objects to the relational tables 


    JPA - java persistence API

        - specifications / standards for ORM Tool 

    JPA Providers
    ------------------
        - hibernate / hibernate jpa
        - mybatis 
        - eclipselink
        - openjpa



    Entity 
        - Entity is an object which is managed by the JPA Persistence provider 
        - when we talk about mapping objects to a relational database, persisting objects, 
                query operations... instead of 'object' we use the term 'Entity'
        - Entities can be concrete or abstract 
        - they support inheritance, relationships 
        - Create Entity Class 

            @Entity 
            public class Employee {

                    @Id 
                    private int id;
                    //...
                    //..

                    public Employee(){}

                    //getter/setter
            }

    EntityManager 
        - responsible to persist entities, query entities etc. 

        EntityManagerFactory factory = Persistence.createEntityManagerFactory("PUName");
        EntityManager manager = factory.createEntityManager();

    Persistence Unit 
    -------------------
        - a named configuration of a set of entities you want to persist 
        - defined in persistence.xml file 





    Spring Data JPA
        - offers repository pattern 

        Repository<T, ID> interface 
            |
            |
            |
        CrudRepository<T, ID> interface 
            |
            |-->describes all the common methods to perform Crud operations 
            |
            |-> long count()
            |-> void	delete(T entity)
            |-> void	deleteAll()
            |-> void	deleteById(ID id)
            |-> Iterable<T>	findAll()
            |-> Optional<T>	findById(ID id)
            |-> <S extends T> S	save(S entity)
            |-> ..
            |
        PagingAndSortingRepository<T, ID> interface
            |
            |
            |-> Page<T>	findAll(Pageable pageable)
            |-> Iterable<T>	findAll(Sort sort)
            |
            |
        JpaRepository<T, ID> interface
            |
            |-> List<T>	findAll() 
            |-> <S extends T>List<S>	findAll(Example<S> example)


    default mapping 

        - name of table is similar to entity class name 
        - name of table field is similar to property/attribute of entity class 
        - each primitive type of java has a default mapping sqltype in rdbms db 

                String                  VARCHAR(255)
                int 
                long 
                byte 
                float
                double
                boolean 
                Date 


    custom mapping 

        @Table 
        @Column 



    Query data / fetching data from db
    -----------------------------------------

        1. using methods offered by repository pattern 
                Iterable<T>	findAll()
                Page<T>	findAll(Pageable pageable)
                Iterable<T>	findAll(Sort sort)
                List findAll(Example<S> example)
                T findOne(Example<S> example)

        2. using custom query methods 

                    //JPQL statement 
                    @Query("SELECT e FROM Employee e")
		            List<Employee> getAllEmployees();

                    @Query("SELECT e FROM Employee e where e.salary>=:sal")
		            List<Employee> getAllEmployees(@Param("sal") double salary);

                    //native SQL Statement 
                    @Query(value = "SELECT * FROM Employee e where salary>=:sal", nativeQuery = true)
			        List<Employee> getAllEmployees(@Param("sal") double salary);

        3. using named queries 

                    @Entity
                    @NamedQuery(name = "getAllEmpsByCity", query = "SELECT e FROM Employee e where e.city=?1")
                    public class Employee {
                                //...
                    }

                    //repository
                    //named query example
			        List<Employee> getAllEmpsByCity(String city);


        4. using the query generation methods 



        //executing dynamic queries 
        5. using Criteria API 

        6. using QueryDSL API


    Inheritance 
    ----------------
            class User {
                //common properties 
                // id, username, password
            }

            class Employee {                class Customer {
                //empid, salary, 
            }                                }

    Relationships
    -----------------

            class Department {                                  class Employee {
                
                private int deptId;                                 private int empid;
                private String name;                                private string name; 
                                                                    private String city;
                                                                    //...

                @OneToMany                                          @ManyToOne
                private List<Employee> employees;                   private Department department;

                //constructor /getter / setters                     //constructor /getter / setters

            }                                                      }

            Department_tb                                          employee_tb
            -------------------                                    -------------------
            deptId      name                                        empid       name        city    deptId
            1           sdfdfsdfsd

            department_employee
            ---------------------
            deptId     empId
            1           1
            1           2
            1           3

            
            
                                                             


        1. identify & configure the relationship using appropriate annotations 
                - consider the direction and cardinality 

                    Department     1 <-----------------> *   Employee


        2. Understand how the associations are represented in db 

                @OneToOne               : join column               Eager
                @ManyToOne              : join column               Eager


                @OneToMany              : join table                Lazy
                @ManyToMany             : join table                Lazy


        3. define appropriate CASCADE event & Fetch policy when entities are associated with each other 


                Cascade events 
                    - PERSIST 
                    - REMOVE 
                    - MERGE 
                    - DETACH 
                    - ALL 

        4. perform DB operations




        class Genre {                               class Movie {
            //..                                        //..
        }                                           }


        Genre  1 <----------------> *     Movie

    **Create custom auto configuration class 
        https://www.baeldung.com/spring-boot-custom-auto-configuration


